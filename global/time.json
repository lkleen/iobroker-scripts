/* -- do not edit following lines - START --
{
  "expert": true,
  "debug": false,
  "verbose": false
}
-- do not edit previous lines - END --*/
const Periods =  {
    MORNING: {begin: 601, end: 800, name: 'morning'},
    DAY: {begin: 801, end: 2200, name: 'day'},
    EVENING: {begin: 2201, end: 2400, name: 'evening'},
    NIGHT: {begin: 0, end: 600, name: 'night'}
};

function Timer () {
    var timer = Object.create (Timer.methods);
    timer.timestamp = 0;
    return timer;
}

Timer.methods = {
    reset: function () {
        this.timestamp = new Date ().getTime ();
    },

    getElapsedMilliseconds: function () {
        return new Date().getTime () - this.timestamp;
    },

    isElapsed: function (milliseconds) {
        return this.getElapsedMilliseconds () > milliseconds;
    }
};

function LocalTime () {
    var localTime = Object.create (LocalTime.methods);
    return localTime;
}

LocalTime.methods = {
    hhmm: function () {
        var date = new Date ();
        var localHour = date.getUTCHours () + 1;
        return localHour * 100 + date.getMinutes ();
    },

    getPeriod: function () {
        var timevalue = this.hhmm ();
        for (period in Periods) {
            var range = Periods[period];

            // range within day bounds
            if (range.begin < range.end) {
                if (timevalue >= range.begin && timevalue <= range.end) {
                    return range;
                }
            } else { // range over midnight
                if (timevalue >= range.begin || timevalue <= range.end) {
                    return range;
                }        
            }
        }
        return null;
    },
};

function SensorControl (parameters) {
    var sensorControl = Object.create (SensorControl.methods);
    sensorControl.parameters = parameters;

    sensorControl.isSensorOn = function () {return getState(parameters.sensorControlId).val};

    sensorControl.presenceTrigger = {id: parameters.sensorId, val: true}; /* presence trigger */
    sensorControl.absenseTrigger  = {id: parameters.sensorId, val: false}; /* absense trigger */

    sensorControl.isHallLightOn = function () {return getState(parameters.light1Id).val || getState(parameters.light2Id).val};
    sensorControl.isOnByMotion = false;

    sensorControl.lightsOnCondition = function () {
        if (sensorControl.isHallLightOn ()) {return false;}
        return sensorControl.isSensorOn ();
    }

    sensorControl.localTime = new LocalTime ();

    sensorControl.turnOffDelay = parameters.offDelay;
    sensorControl.turnOffTimer = new Timer ();

    return sensorControl;
};

SensorControl.methods = {

    turnOnLight : function (period) {
        switch (period)
        {
            case Periods.MORNING:   setState (this.parameters.morningState, true, null); break;
            case Periods.DAY:       setState (this.parameters.dayState, true, null); break;
            case Periods.EVENING:   setState (this.parameters.eveningState, true, null); break;
            case Periods.NIGHT:     setState (this.parameters.nightState, true, null); break;
        }
        log('turn on light:' + period.name, this.parameters.logLevel);
    },

    handlePresenceTrigger : function () {
        log('SensorControl.presence: true, elapsed: ' + this.turnOffTimer.getElapsedMilliseconds (), this.parameters.logLevel);
        this.turnOffTimer.reset ();
        if (!this.isHallLightOn ()) {
            this.turnOnLight (this.localTime.getPeriod ());
            this.isOnByMotion = true;     
        }        
    },

    handleAbsenceTrigger : function () {
        log('SensorControl.presence: false, elapsed: ' + this.turnOffTimer.getElapsedMilliseconds (), this.parameters.logLevel);
        if (!this.isOnByMotion || !this.isHallLightOn ()) {
            return;
        }
        if (this.turnOffTimer.isElapsed(this.turnOffDelay)) {
            setState (this.parameters.offState, true, null);
            this.isOnByMotion = false;
        }        
    }
};
